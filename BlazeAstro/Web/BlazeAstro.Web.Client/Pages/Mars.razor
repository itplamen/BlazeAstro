@page "/mars"

@inject HttpClient HttpClient

 <div class="row">
     <div class="col">
        <div class="form-floating">
            <select @onchange="OnRoverSelect"
                class="form-select"
                id="Rovers"
                aria-label="Rovers">

                @foreach (var rover in MarsConstants.Rovers.Keys)
                {
                    <option selected="@(rover == selected)" value=@rover.ToString()>@rover</option>
                }
            </select>
            <label for="Rovers">Select rover ...</label>
        </div>
    </div>
    <div class="col">
        <div class="form-floating">
            <input class="form-control form-control" type="number" min="0" @bind="@sol" id="Sol" @oninput="OnSolInput" />
            <label for="Sol">Enter sol ...</label>
        </div>
    </div>
    <div class="col">
        <div class="form-floating">
            <DateRangePicker class="form-control" id="EarthDate"
                SingleDatePicker="true"
                MinDate="DateTimeOffset.ParseExact(MarsConstants.Rovers[selected].LandingDate.ToString(MarsConstants.DateFormat), MarsConstants.DateFormat, null)"
                MaxDate="DateTimeOffset.ParseExact(MarsConstants.Rovers[selected].LastDate.ToString(MarsConstants.DateFormat), MarsConstants.DateFormat, null)"
                OnRangeSelect="OnEarthDateSelect" 
                @bind-StartDate="earthDate" />    
            <label for="EarthDate">Select earth date ...</label>
        </div>
    </div>
    <div class="col">
         <div class="form-floating">
             <button type="button" class="btn btn-success" @onclick="OnShowImages">Show Images</button>
        </div>
    </div>
</div>

@if (outputModel != null)
{
    <div class="row">
        @foreach (var img in outputModel.Photos)
        {
            <ImageComponent 
                Url="@img.ImgUrl" 
                Title="@($"{img.Rover.Name} - {img.Id}")" 
                Text="@($"{img.EarthDate} (Sol: {img.Sol}")" 
                Explanation="@($"{img.Camera.FullName} ({img.Camera.Id} - {img.Camera.Name})")" 
                OnClick="() => OnShowMoreInfo(img.Id)">
                <div class="modal-header">
                    <h5 class="modal-title" id="ModalLabel">@photo?.Rover?.Name - @photo?.Id</h5>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <img src="@photo?.ImgUrl" class="card-img-top" alt="@(photo?.Rover?.Name + " Img")">
                    </div>
                </div>
            </ImageComponent>
        }
    </div>
}

@code {
    int sol;
    PhotoOutputModel photo;
    MarsOutputModel outputModel;
    DateTimeOffset? earthDate = MarsConstants.Rovers.First().Value.LandingDate;
    RoverName selected = MarsConstants.Rovers.Keys.First();
    string minDateRange = MarsConstants.Rovers.First().Value.LandingDate.ToString(MarsConstants.DateFormat);

    protected override async Task OnInitializedAsync()
    {
        outputModel = await HttpClient.GetFromJsonAsync<MarsOutputModel>
            ($"api/mars?RoverName={RoverName.Perseverance.ToString()}&EarthDate={DateTime.Now.AddDays(-2).ToString(MarsConstants.DateFormat)}");
    }

    private void OnSolInput(ChangeEventArgs e)
    {
        earthDate = MarsConstants.Rovers[selected].LandingDate;
    }

    private void OnRoverSelect(ChangeEventArgs e)
    {
        selected = (RoverName)Enum.Parse(typeof(RoverName), e.Value.ToString());
        earthDate = MarsConstants.Rovers[selected].LandingDate;
        sol = 0;
    }

    private void OnEarthDateSelect()
    {
        sol = 0;
    }

    private async void OnShowImages(MouseEventArgs e)
    {
        string urlParam = $"RoverName={selected.ToString()}&"; 

        if (sol > 0)
        {
            urlParam += $"Sol={sol}";
        }
        else
        {
            urlParam += $"EarthDate={earthDate.Value.ToString(MarsConstants.DateFormat)}";
        }

        outputModel = await HttpClient.GetFromJsonAsync<MarsOutputModel>($"api/mars?{urlParam}");

        StateHasChanged();
    }

    private void OnShowMoreInfo(int photoId)
    {
        photo = outputModel.Photos.FirstOrDefault(x => x.Id == photoId);
    }
}
