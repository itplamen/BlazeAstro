@page "/apod"

@inject HttpClient HttpClient 

<h3>NASA Astronomy Picture of the Day (APOD)</h3>
<p>Each day a different image or photograph of our universe is featured, along with a brief explanation written by a professional astronomer</p>

 <div class="row">
     <div class="col">
         <div class="form-floating">
             <DateRangePicker class="form-control" id="DateRange"
                MinDate="@DateTimeOffset.ParseExact(ApodConstants.MinRange, ApodConstants.DateFormat, null)"
                MaxDate="DateTimeOffset.Now"
                @bind-StartDate="startDate"
                @bind-EndDate="endDate"
                OnRangeSelect="OnRangeSelect" />    
            <label for="DateRange">Select date range ...</label>
        </div>
    </div>
    <div class="col">
        <div class="form-floating">
            <select @onchange="OnRandomImageSelect"
                class="form-select"
                id="RandomImages"
                aria-label="Random images">

                @foreach (var number in randomNumbers)
                {
                    <option selected="@(number == selected)" value=@number>@number</option>
                }
            </select>
            <label for="RandomImages">Select random images ...</label>
        </div>
    </div>
</div>
<div class="row">
    @if (images != null)
    {
        foreach (var apod in images)
        {
            <ImageComponent Url="@apod.Url" Title="@apod.Title" Text="@apod.Date" Explanation="@apod.Explanation" OnClick="() => OnShowMoreInfo(apod.Date)">
                <div class="modal-header">
                    <h5 class="modal-title" id="ModalLabel">@image?.Title</h5>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <img src="@image?.Url" class="card-img-top" alt="Apod Img">
                        <div class="card-body">
                            <p class="card-text">
                                <small class="text-muted">
                                    <span class="oi oi-calendar"></span>
                                    @image?.Date
                                </small>
                                <small class="text-muted">
                                    <span class="oi oi-person"></span>
                                    @(image?.Copyright ?? "NASA")
                                </small>
                            </p>
                            <p class="card-text">@image?.Explanation</p>
                        </div>
                    </div>
                </div>
            </ImageComponent>
        }
    }
</div>

@code {
    string selected;
    ApodOutputModel image;
    IEnumerable<ApodOutputModel> images;
    DateTimeOffset? startDate = DateTime.Today.AddDays(-6);
    DateTimeOffset? endDate = DateTime.Today.AddDays(-1);
    IEnumerable<string> randomNumbers = new List<string>() { "None", "10", "25", "50", "100" };

    protected override async Task OnInitializedAsync()
    {
        images = await HttpClient.GetFromJsonAsync<IEnumerable<ApodOutputModel>>(
            $"api/apod?startDate={startDate.Value.Date.ToShortDateString()}&endDate={endDate.Value.Date.ToShortDateString()}");
    }

    private async void OnRangeSelect(DateRange range)
    {
        selected = randomNumbers.First();

        string urlParam = $"date={range.Start.Date.ToShortDateString()}";

        if (range.Start.Date != range.End.Date)
        {
            urlParam = $"startDate={range.Start.Date.ToShortDateString()}&endDate={range.End.Date.ToShortDateString()}";
        }

        images = await HttpClient.GetFromJsonAsync<IEnumerable<ApodOutputModel>>($"api/apod?{urlParam}");

        StateHasChanged();
    }

    private async void OnRandomImageSelect(ChangeEventArgs e)
    {
        if (e.Value.ToString() != randomNumbers.First())
        {
            selected = e.Value.ToString();
            images = await HttpClient.GetFromJsonAsync<IEnumerable<ApodOutputModel>>($"api/apod?count={e.Value}");

            StateHasChanged();
        }
    }

    private void OnShowMoreInfo(string date)
    {
        image = images.FirstOrDefault(x => x.Date == date);
    }
}